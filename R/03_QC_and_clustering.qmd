---
title: "QC and Clustering for snRNA-seq Data"
format: html
---

```{r}
rm(list = ls())
```

Load the libraries:

```{r}
library(Seurat)
library(tidyverse)
library(patchwork)
library(clustree)
```

Load the seurat object:

```{r}
snRNAseq <- readRDS("../data/01_RNA_seurat")
```

Look at metadata:

```{r}
snRNAseq[[]]
```

## QC

Create QC metrics:

```{r}
snRNAseq[["percent.mt"]] <- PercentageFeatureSet(snRNAseq, 
                                                 pattern = "^MT-")
```

### nCount_RNA

Indicates low quality cells or empty droplets (very low nCount_RNA) and possible doublets (very high nCount_RNA).

Violin plot:

```{r}
VlnPlot(snRNAseq,
        features = "nCount_RNA")

ggsave("../plots/03_vln_nCount_RNA.png")
```

Density plot:

```{r}
snRNAseq[[]] |> 
  ggplot(mapping = aes(x = nCount_RNA)) +
  geom_density() +
  scale_x_log10() +
  theme_bw() +
  ylab("Cell density") + 
  geom_vline(xintercept = 400,
             color = "red") +
  geom_vline(xintercept = 15000,
             color = "red")

ggsave("../plots/03_dens_nCount_RNA.png")
```

Filter based on plots:

```{r}
snRNAseq <- subset(snRNAseq, 
                   subset = nCount_RNA > 400 & nCount_RNA < 15000)
```

### nFeature_RNA

Indicates low quality cells (very low nFeature_RNA).

Violin plot:

```{r}
VlnPlot(snRNAseq,
        features = "nFeature_RNA")

ggsave("../plots/03_vln_nFeature_RNA.png")
```

Denisity plot:

```{r}
snRNAseq[[]] |> 
  ggplot(mapping = aes(x = nFeature_RNA)) +
  geom_density() +
  scale_x_log10() +
  theme_bw() +
  ylab("Cell density") + 
  geom_vline(xintercept = 300,
             color = "red")

ggsave("../plots/03_dens_nFeature_RNA.png")
```

Filter based on plots:

```{r}
snRNAseq <- subset(snRNAseq, 
                   subset = nFeature_RNA > 300)
```

### percent.mt

High percent of mitochonodrial genes indicates dying cells.

Violin plot:

```{r}
VlnPlot(snRNAseq,
        features = "percent.mt")

ggsave("../plots/03_vln_percent.mt.png")
```

Density plot:

```{r}
snRNAseq[[]] |> 
  ggplot(mapping = aes(x = percent.mt)) +
  geom_density() +
  theme_bw() +
  ylab("Cell density") +
  geom_vline(xintercept = 5,
             color = "red")

ggsave("../plots/03_dens_percent.mt.png")
```

Filter based on plots:

```{r}
snRNAseq <- subset(snRNAseq, 
                   subset = percent.mt < 5)
```

### remove ribosomal genes

Ribosomal genes interfer in the downstream analysis.'

```{r}
snRNAseq <- snRNAseq[!grepl('^RP[SL]', rownames(snRNAseq)), ]
```

### remove genes that are not expressed in many cells

This was taken into account in "01_create_Seurat.qmd", when creating the Seurat objects.

## Standard Seurat Workflow

Standard preprocessing and clustering workflow based on this vignette: https://satijalab.org/seurat/articles/pbmc3k_tutorial.html

Normalize data:

```{r}
snRNAseq <- NormalizeData(snRNAseq)
```

Feature selection:

```{r}
snRNAseq <- FindVariableFeatures(snRNAseq, 
                                 selection.method = "vst", 
                                 nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(snRNAseq), 10)

# plot variable features with and without labels
p1 <- VariableFeaturePlot(snRNAseq)
p2 <- LabelPoints(plot = p1, 
                  points = top10, 
                  repel = TRUE)
p2

ggsave("../plots/03_variable_features.png")
```

Scaling the data:

```{r}
all.genes <- rownames(snRNAseq)
snRNAseq <- ScaleData(snRNAseq, 
                      features = all.genes)
```

Linear dimensional reduction (PCA):

```{r}
snRNAseq <- RunPCA(snRNAseq, 
                   features = VariableFeatures(object = snRNAseq))
```

Feature in first two principal components:

```{r}
VizDimLoadings(snRNAseq, 
               dims = 1:2, 
               reduction = "pca")

ggsave("../plots/03_PCA_features_1_and_2.png")
```

Cells in PCA space:

```{r}
DimPlot(snRNAseq, reduction = "pca") + NoLegend()
```

Determine dimensionality of the data:

```{r}
ElbowPlot(snRNAseq)

ggsave("../plots/03_elbow_plot.png")
```

We decide to move forward with a dimensionality of 16 PCs.

Clustering:

```{r}
snRNAseq <- FindNeighbors(snRNAseq, dims = 1:16)

snRNAseq <- FindClusters(snRNAseq, resolution = 0.8)
snRNAseq <- FindClusters(snRNAseq, resolution = 0.5)
snRNAseq <- FindClusters(snRNAseq, resolution = 0.3)
snRNAseq <- FindClusters(snRNAseq, resolution = 0.1)
```

Determining resolution:

```{r}
clustree(snRNAseq, prefix = "RNA_snn_res.")

ggsave("../plots/03_clustree.png")
```

Going forward, we will use the clustering at resolution 0.3.

```{r}
Idents(snRNAseq) <- "RNA_snn_res.0.3"
```

UMAP:

```{r}
snRNAseq <- RunUMAP(snRNAseq, 
                    dims = 1:16)

DimPlot(snRNAseq, 
        reduction = "umap")

ggsave("../plots/03_umap_03.png")
```

Save object:

```{r}
saveRDS(snRNAseq, file = "../data/03_RNA_seurat")
```