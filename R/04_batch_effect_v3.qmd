---
title: "Checking Batch Effect for snRNA-seq Data (rpca approach)"
format: html
---

```{r}
rm(list = ls())
```

Load the libraries:

```{r}
library(Seurat)
library(tidyverse)
library(clustree)
```

Load the seurat object:

```{r}
snRNAseq <- readRDS("../data/03_RNA_seurat")
```

## Check Batch Effect

Create metadata variable for sample id:

```{r}
pattern <- "^[^_]*_[^_]*"
snRNAseq[["sample_id"]] <- regmatches(
  rownames(snRNAseq@meta.data), 
  regexpr(pattern, rownames(snRNAseq@meta.data))
  )
snRNAseq[[]]
```

Check for batch effect:

```{r}
DimPlot(snRNAseq, 
        reduction = "umap",
        group.by = "sample_id")

ggsave("../plots/04_batch_sample_id.png")
```

It looks split by condition. I will create a variable for the condition and check again:

```{r}
pattern <- "^[^_]*"
snRNAseq[["condition"]] <- regmatches(
  rownames(snRNAseq@meta.data), 
  regexpr(pattern, rownames(snRNAseq@meta.data))
  )
snRNAseq[[]]

DimPlot(snRNAseq, 
        reduction = "umap",
        group.by = "condition")

ggsave("../plots/04_batch_condition.png")

DimPlot(snRNAseq, 
        reduction = "umap",
        split.by = "condition")

ggsave("../plots/04_batch_condition_split.png")
```

We will split the seurat object on the condition and then integrate the data.

## Integration on samples

The integration is based on this vignette: https://satijalab.org/seurat/articles/integration_introduction, but diverted from it and used rpca for itegration instead of cca, to make it run faster and because cca didn't work (version 1)

Split the seurat object:

```{r}
#| eval: false

snRNAseq[["RNA"]] <- split(snRNAseq[["RNA"]], 
                           f = snRNAseq$condition)
```

The seurat object was already split in 10 groups. This is probably an artifact from merging the individual seurat objects in script 01. We will now integrate the data and process it again.

Perform integration:

```{r}
options(future.globals.maxSize = 1000 * 1024^2)

snRNAseq <- IntegrateLayers(object = snRNAseq, 
                            method = RPCAIntegration,
                            orig.reduction = "pca", 
                            new.reduction = 'integrated.rpca',
                            reference = 1, 
                            verbose = FALSE)

#snRNAseq <- IntegrateLayers(object = snRNAseq, 
#                            method = HarmonyIntegration,
#                            orig.reduction = "pca", 
#                            new.reduction = "harmony",
#                            verbose = FALSE)

snRNAseq[["RNA"]] <- JoinLayers(snRNAseq[["RNA"]])
```

Dimensionality reduction and clustering:

```{r}
snRNAseq <- FindNeighbors(snRNAseq, 
                          reduction = "integrated.rpca", 
                          dims = 1:16)

snRNAseq <- FindClusters(snRNAseq,
                         resolution = c(0.1, 0.3, 0.5, 0.8))

clustree(snRNAseq, prefix = "RNA_snn_res.")

ggsave("../plots/04_clustree.png")
```

We will continue with a resolution of 0.3.

```{r}
Idents(snRNAseq) <- "RNA_snn_res.0.3"

snRNAseq <- RunUMAP(snRNAseq, 
                    dims = 1:16,
                    reduction = "integrated.rpca")

DimPlot(snRNAseq, 
        reduction = "umap",
        group.by = "condition")

ggsave("../plots/04_batch_condition_integrated.png")

DimPlot(snRNAseq, 
        reduction = "umap",
        split.by = "condition")

ggsave("../plots/04_batch_condition_split_integrated.png")
```

Save object:

```{r}
saveRDS(snRNAseq, file = "../data/04_RNA_seurat_rpca_int")
```

The data is now integrated for the 10 samples, but we still see a clear clustering difference between the conditions. We will now split the data on the conditions and integrate that.

