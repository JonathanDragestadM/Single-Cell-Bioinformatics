---
title: "Differential abundance and differential gene expression + GSEA"
format: html
editor: visual
---

## Differenital Abundance and Differential Gene Expression + GSEA

## Loading libraries
```{r}
library(Seurat)
library(SingleCellExperiment)
library(DCATS)
library(SeuratData)
library(tidyverse)
library(Seurat)
library(enrichplot)
library(clusterProfiler)
library(ggrepel)
library(tibble)
library(DESeq2)
```

## Load data
```{r}
data <- readRDS("XXX")
```

## Subset data
```{r}
data.sub <- subset(data, subset = XXX)
```

## Create SingleCellExperiment-object 
```{r}
sce <- as.SingleCellExperiment(data)
sce <- as.SingleCellExperiment(data.sub)
```

## Differential Abundance Analysis
```{r}
abundances <- table(sce$cell_type_2, sce$id) 
abundances <- unclass(abundances) 
head(abundances)
```

## Create count matrix
```{r}
knn_mat = knn_simMat(immune.sub@graphs$integrated_snn, immune.sub$cell_type_2)
print(knn_mat)
```

Do something that makes sense with the groups. 
```{r}
# data.sub$timepoint[immune.sub$timepoint == '3hMTB'] <- 'stim'
# data.sub$timepoint[immune.sub$timepoint == 'UT'] <- 'ctrl'
# 
# data.sub$id <- paste0(immune.sub$timepoint, immune.sub$subject)
# 
# count_mat = table(immune.sub$id, immune.sub$cell_type_2)
# count_mat
```

## Estimate similarity matrix
Make design matrix relevant to data
```{r}
sim_design = data.frame(condition = c(rep("ctrl", 8), rep("stim", 8)))
dcats_GLM(count_mat, sim_design, knn_mat)
```

## Differential Gene Expression
```{r}

#Preparing the single-cell dataset for pseudobulk analysis
# Aggregate counts to sample level

counts <- AggregateExpression(data.sub, 
                              group.by = c("cell_type_2", "id"),
                              assays =  "RNA",
                              return.seurat = FALSE)

counts <- counts$RNA

# transpose
counts.t <- t(counts)

# convert to data.frame
counts.t <- as.data.frame(counts.t)

# get values where to split
splitRows <- gsub('_.*', '', rownames(counts.t))

# split data.frame
cts.split <- split.data.frame(counts.t,
                              f = factor(splitRows))
# fix colnames and transpose
cts.split.modified <- lapply(cts.split, function(x){
  rownames(x) <- gsub('.*_(.*)', '\\1', rownames(x))
  t(x)
  
})

# 1. Get counts matrix
counts_monocytes <- cts.split.modified$`Monocyte`


# 2. generate sample level metadata
colData <- data.frame(samples = colnames(counts_monocytes))

colData <- colData %>%
  mutate(condition = ifelse(grepl('stim', samples), 'Stimulated', 'Control')) %>%
  column_to_rownames(var = 'samples')


# perform DESeq2 --------
# Create DESeq2 object   
dds <- DESeqDataSetFromMatrix(countData = counts_monocytes,
                              colData = colData,
                              design = ~ condition)

#skip this step, it loads the created matrix from previous step(To be able to knit Rmd)
dds<- readRDS("/net/pupil1/home/people/andson/dds.rds")

# filter
keep <- rowSums(counts(dds)) >=10
dds <- dds[keep,]

# run DESeq2
dds <- DESeq(dds)

# Check the coefficients for the comparison
resultsNames(dds)
```

## GSEA



