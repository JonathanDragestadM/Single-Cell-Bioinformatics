---
title: "Differential abundance and differential gene expression + GSEA"
format: html
---

## Differenital Abundance and Differential Gene Expression + GSEA

## Loading libraries

```{r}
library(Seurat)
library(SingleCellExperiment)
library(DCATS)
library(SeuratData)
library(tidyverse)
library(Seurat)
library(enrichplot)
library(clusterProfiler)
library(ggrepel)
library(tibble)
library(DESeq2)
```

## Load data

```{r}
# data <- readRDS("/home/people/s184243/22102_ascb/Single_Cell_Bioinformatics/data/05_RNA_seurat")
data <- readRDS("/home/people/s165827/22102/HeleneProj/data/05_RNA_seurat_singleR_subset_ann")
```

## Subset

```{r}
# data.sub <- subset(data, subset = cell_type_singleR %in% c('T_cells', 'Epithelial_cells', 'Endothelial_cells'))
```

## Crate seurate graph

```{r}
data <- RunPCA(data, npcs = 30, verbose = FALSE)
ElbowPlot(data)
data <- RunUMAP(data, reduction = "pca", dims = 1:16)
data <- FindNeighbors(data, return.neighbor = TRUE, reduction = 'pca', dims = 1:16, features = VariableFeatures(object = data))
data <- FindClusters(data, resolution = 0.5)
DimPlot(data,
        #label = TRUE,
        group.by = "cell_type_singleR", 
        split.by = 'condition')  
```

## Create SingleCellExperiment-object

```{r}
DefaultAssay(data) <- "RNA"
# sce <- as.SingleCellExperiment(data, graphs = c("pca", "umap"))
```

## Differential Abundance Analysis

```{r}
# abundances <- table(sce$cell_type_2, sce$sample_id) 
abundances <- table(data[[]]$cell_type_singleR, data[[]]$sample_id) 
abundances <- unclass(abundances) 
head(abundances)
```

## Create count matrix

```{r}
knn_mat = knn_simMat(data@graphs$RNA_snn, data[[]]$cell_type_singleR)
print(knn_mat)
```

Do something that makes sense with the groups.

```{r}
count_mat = table(data[[]]$sample_id, data[[]]$cell_type_singleR)
count_mat
```

## Estimate similarity matrix

Make design matrix relevant to data

```{r}
sim_design = data.frame(condition = c(rep("crc", 5), rep("norm", 5)))
dcats_GLM(count_mat, sim_design, knn_mat)
```

## Differential Gene Expression

```{r}

#Preparing the single-cell dataset for pseudobulk analysis
# Aggregate counts to sample level

counts <- AggregateExpression(data, 
                              group.by = c("cell_type_singleR", "sample_id"),
                              assays =  "RNA",
                              return.seurat = FALSE)

counts <- counts$RNA

# transpose
counts.t <- t(counts)

# convert to data.frame
counts.t <- as.data.frame(counts.t)

# get values where to split
splitRows <- gsub('_.*', '', rownames(counts.t))

# split data.frame
cts.split <- split.data.frame(counts.t,
                              f = factor(splitRows))
# fix colnames and transpose
cts.split.modified <- lapply(cts.split, function(x){
  rownames(x) <- gsub('.*_(.*)', '\\1', rownames(x))
  t(x)
  
})
```

```{r}

dge <- function(celltype){
  # 1. Get counts matrix
  counts <- cts.split.modified[[celltype]]
  
  # 2. generate sample level metadata
  colData <- data.frame(samples = colnames(counts))
  
  colData <- colData %>%
    mutate(condition = ifelse(grepl('CRC', samples), 'CRC', 'Normal')) %>%
    column_to_rownames(var = 'samples')
  
  
  # perform DESeq2 --------
  # Create DESeq2 object   
  dds <- DESeqDataSetFromMatrix(countData = counts,
                                colData = colData,
                                design = ~ condition)
  
  #skip this step, it loads the created matrix from previous step(To be able to knit Rmd)
  # dds<- readRDS("/net/pupil1/home/people/andson/dds.rds")
  
  # filter
  keep <- rowSums(counts(dds)) >=10
  dds <- dds[keep,]
  
  # run DESeq2
  dds <- DESeq(dds)
  
  # Check the coefficients for the comparison
  resultsNames(dds)
  
  # Generate results object
  res <- results(dds, name = "condition_Normal_vs_CRC")
  res2 <- as.data.frame(res)
  
  summary(res)
  
  # Turn the DESeq2 results object into a tibble for use with tidyverse functions
  res_tbl <- res %>%
    data.frame() %>%
    rownames_to_column(var = "gene") %>%
    as_tibble() %>%
    arrange(padj)
  
  # Check results output
  res_tbl 
  
  # Set thresholds
  padj_cutoff <- 0.005
  
  # Subset the significant results
  sig_res <- dplyr::filter(res_tbl, padj < padj_cutoff) %>%
    dplyr::arrange(padj)
  
  # Check significant genes output
  sig_res
  
  ## Order results by padj values
  top20_sig_genes <- sig_res %>%
    dplyr::arrange(padj) %>%
    dplyr::pull(gene) %>%
    head(n=20)
  
  ## Order results by log fold change
  top20_sig_genes <- sig_res %>%
    dplyr::arrange(log2FoldChange) %>%
    dplyr::pull(gene) %>%
    head(n=20)
  
  library(fgsea)
  gsList <- readRDS("/home/projects/22102_single_cell/day5/gene_sets.Rds")
  
  res$genes <- rownames(res)
  
  #Add EntrezID for the genes
  library(org.Hs.eg.db)
  Entrez <- AnnotationDbi::select(org.Hs.eg.db,
                                      key=res$genes, 
                                      columns="ENTREZID",
                                      keytype="SYMBOL")
  Entrez <- as_tibble(Entrez)
  
  #Ranking data
  res<- as.data.frame(res)
  
  res <- inner_join(res, Entrez, by=c("genes"="SYMBOL"))
  
  #Create new metric
  res$stat_sig <- -log10(res$pvalue) * sign(res$log2FoldChange)
  
  
  #Remove those genes that do not have an entrezid
  res2 <- filter(res, !is.na(ENTREZID))
  
  rankData <- res2$stat_sig
  names(rankData) <- res2$genes
  rankData <- na.omit(rankData)
  head(rankData)
  
  #Running fgsea algorithm:
  fgseaRes <- fgsea(pathways=gsList, stats=rankData)
  # Warning: There are ties in the preranked stats (0.26% of the list).
  
  #Tidy the results
  fgseaResTidy <- fgseaRes %>%
    as_tibble() %>%
    arrange(desc(NES))
  
  
  #Plot the top 10 upregulated/downregulated genes after stimulation
  
  # Sort the data frame based on NES in descending order to get top 10 pathways
  top_10 <- fgseaResTidy %>%
    arrange(desc(NES)) %>%
    head(10)
  
  # Sort the data frame based on NES in ascending order to get bottom 10 pathways
  bottom_10 <- fgseaResTidy %>%
    arrange(NES) %>%
    head(10)
  
  # Combine top 10 and bottom 10 pathways
  top_bottom_10 <- rbind(top_10, bottom_10)
  
  
  ggplot(top_bottom_10, aes(reorder(pathway, NES), NES)) +
    geom_col(aes(fill=padj<0.05)) +
    coord_flip() +
    labs(x="Pathway", y="Normalized Enrichment Score",
         title="Top 10 and Bottom 10 Hallmark pathways based on Absolute NES from GSEA") + 
    theme_minimal()
  
  ggsave(glue('../plot/06_gsea_{celltype}.png'))
}
```

## Differential cell-cell communication

```{r}
library(CellChat)
library(patchwork)
library(future)
options(stringsAsFactors = FALSE)

# split data into CRC and normal
data_crc <- subset(data, 
                   subset = condition == 'CRC')
data_norm <- subset(data, 
                    subset = condition == 'norm')

# create CellChat objects
cellchat_crc <- createCellChat(object = data_crc, 
                               meta = data_crc@meta.data, 
                               group.by = "cell_type_singleR")
cellchat_norm <- createCellChat(object = data_norm, 
                                meta = data_norm@meta.data, 
                                group.by = "cell_type_singleR")

# set interaction-ligand database
CellChatDB <- CellChatDB.human 

# show the structure of the database
glimpse(CellChatDB$interaction)

# use a subset of CellChatDB for cell-cell communication analysis
CellChatDB.use <- subsetDB(CellChatDB, 
                           search = "Secreted Signaling") 

# set the used database in the object
cellchat_crc@DB <- CellChatDB.use
cellchat_norm@DB <- CellChatDB.use

#Pre-processing the expression data for cell-cell communication analysis
# subset the expression data of signaling genes for saving computation cost
cellchat_crc <- subsetData(cellchat_crc) 
cellchat_norm <- subsetData(cellchat_norm)

future::plan("multisession", workers = 4) # do parallel
cellchat_crc <- identifyOverExpressedGenes(cellchat_crc)
cellchat_crc <- identifyOverExpressedInteractions(cellchat_crc)
cellchat_norm <- identifyOverExpressedGenes(cellchat_norm)
cellchat_norm <- identifyOverExpressedInteractions(cellchat_norm)

#Part II: Inference of cell-cell communication network
cellchat_crc <- computeCommunProb(cellchat_crc)
cellchat_norm <- computeCommunProb(cellchat_norm)

# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
cellchat_crc <- filterCommunication(cellchat_crc, min.cells = 10)
cellchat_norm <- filterCommunication(cellchat_norm, min.cells = 10)

#Extract the inferred cellular communication network as a data frame
df.net_crc <- subsetCommunication(cellchat_crc)
df.net_norm <- subsetCommunication(cellchat_norm) #returns a data frame consisting of all the inferred cell-cell communications at the level of ligands/receptors. Set slot.name = "netP" to access the the inferred communications at the level of signaling pathways


#df.net <- subsetCommunication(cellchat, signaling = c("TNF", "TGFb")) #gives the inferred cell-cell communications mediated by signaling WNT and TGFb.

#Infer the cell-cell communication at a signaling pathway level

cellchat_crc <- computeCommunProbPathway(cellchat_crc)
cellchat_norm <- computeCommunProbPathway(cellchat_norm)

# CRC
#Calculate the aggregated cell-cell communication network
cellchat_crc <- aggregateNet(cellchat_crc)
groupSize <- as.numeric(table(cellchat_crc@idents))
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat_crc@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "CRC: Number of interactions")
netVisual_circle(cellchat_crc@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "CRC: Interaction weights/strength")
```

```{r}
# NORM
#Calculate the aggregated cell-cell communication network
cellchat_norm <- aggregateNet(cellchat_norm)
groupSize <- as.numeric(table(cellchat_norm@idents))
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat_norm@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Norm: Number of interactions")
netVisual_circle(cellchat_norm@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Norm: Interaction weights/strength")
```

Save cell chat objects:

```{r}
saveRDS(cellchat_crc, file = "../results/cellchat_crc")
saveRDS(cellchat_norm, file = "../results/cellchat_norm")
```

```{r}
# CRC
pathways <- cellchat_crc@netP$pathways

#Part III: Visualization of cell-cell communication network
pathways.show <- c("SEMA3")

# Circle plot
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_crc, signaling = pathways.show, layout = "circle")
```

```{r}
# Norm
pathways <- cellchat_norm@netP$pathways

#Part III: Visualization of cell-cell communication network
pathways.show <- c("SEMA3") 

# Circle plot
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_norm, signaling = pathways.show, layout = "circle")
```

```{r}
# CRC: Heatmap
par(mfrow=c(1,1))
netVisual_heatmap(cellchat_crc, signaling = pathways.show, color.heatmap = "Reds")
```

```{r}
# Norm: Heatmap
par(mfrow=c(1,1))
netVisual_heatmap(cellchat_norm, signaling = pathways.show, color.heatmap = "Reds")
```
